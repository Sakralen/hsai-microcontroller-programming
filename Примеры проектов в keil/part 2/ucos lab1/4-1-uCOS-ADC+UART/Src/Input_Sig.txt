/*
define button "Rad10", "radix=10"
define button "Rad16", "radix=16"
radix=10
*/

/* 	 Сигнальная функция для формирования
     затухающего синуса с шумом
  fTsin - период синуса в миллисекундах
  fTDis - период затухания в миллисекундах
*/
define int iT
define int iT0
define float fArg 

signal void Sig0(float fTsin, float fTDis) {  
  while (1) {
	  iT0=states;
	  for (iT=0; iT<5000; iT++) {
	    fArg= (float)(states-iT0)*1000/24000000;	  //  Время от начала сигнала в мс
	    adc1_in1=1.5 + __sin(6.283*fArg/fTsin)*1.8 *__exp(-fArg/fTDis) + ((float)(rand(0)-16384))/200000;
                //  Аналоговый сигнал на adc1_in11
	    twatch(5000);
	  }
  }
}

//  Формирование пилообразного сигнала в пределах от 0 до величины limit
signal void pila0 (float limit) {
float volts;
  while (1) {           /* forever */
    volts = 0;
    while (volts <= limit) {
      adc1_in2 = volts;     // analog input-12
      twatch (30000);  	// 200000 states Time-Break
      volts += 0.01;    // increase voltage
    }
    volts = limit;
    while (volts >= 0.0) {
      adc1_in2 = volts;
      twatch (40000);  	/* 200000 states Time-Break */
      volts -= 0.01;    /* decrease voltage */
    }
  }
}

MAP 0x0,        0x1FFF      EXEC READ WRITE
MAP 0x20000000, 0x200011FF  EXEC READ WRITE
MAP 0x08000000, 0x0801FFFF  EXEC READ 

//  Можно автоматически запускать сигнальные функции - вот так:
sig0(210,240)
pila0(2.0)  
//G	//  работает, если G или g, а если две буквы Go или go - не компилит 
	// если запускается, то ЛогАнализатор не отображается, пока не нажмешь на Стоп 


